@file:OptIn(ExperimentalMaterial3Api::class)

package com.thati.airalert

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.thati.airalert.ui.theme.ThatiAirAlertTheme
import java.text.SimpleDateFormat
import java.util.*

/**
 * Alert History Activity
 * ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ ·Äô·Äæ·Äê·Ä∫·Äê·Äô·Ä∫·Ä∏·Äô·Äª·Ä¨·Ä∏ ·ÄÄ·Äº·Ää·Ä∑·Ä∫·Äõ·Äæ·ÄØ·Äõ·Äî·Ä∫
 */
class AlertHistoryActivity : ComponentActivity() {
    
    data class AlertRecord(
        val id: String,
        val timestamp: Long,
        val type: AlertType,
        val message: String,
        val location: String,
        val severity: Severity,
        val source: String,
        val relayCount: Int,
        val isRead: Boolean = false
    )
    
    enum class AlertType(val emoji: String, val label: String, val color: Color) {
        HELICOPTER("üöÅ", "·Äõ·Äü·Äê·Ä∫·Äö·Ä¨·Äâ·Ä∫", Color(0xFFED8936)),
        JET_FIGHTER("‚úàÔ∏è", "Jet Fighter", Color(0xFFE53E3E)),
        CIVIL_AIRCRAFT("üõ©Ô∏è", "·Äï·Äº·Ää·Ä∫·Äû·Ä∞·Ä∑·Äú·Ä±·Äö·Ä¨·Äâ·Ä∫", Color(0xFF3182CE)),
        ATTACK("üí•", "·Äê·Ä≠·ÄØ·ÄÄ·Ä∫·ÄÅ·Ä≠·ÄØ·ÄÄ·Ä∫·Äô·Äæ·ÄØ", Color(0xFF9B2C2C)),
        FIRE("üî•", "·Äô·ÄÆ·Ä∏·Äú·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ", Color(0xFFD69E2E)),
        FLOOD("üåä", "·Äõ·Ä±·ÄÄ·Äº·ÄÆ·Ä∏·Äô·Äæ·ÄØ", Color(0xFF2B6CB0)),
        POWER_OUTAGE("‚ö°", "·Äú·Äª·Äæ·Äï·Ä∫·ÄÖ·ÄÖ·Ä∫·Äï·Äº·Äê·Ä∫", Color(0xFF553C9A)),
        EVACUATION("üèÉ", "·Äõ·ÄΩ·Äæ·Ä±·Ä∑·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Äî·Ä∫", Color(0xFFE53E3E)),
        ALL_CLEAR("‚úÖ", "·Äò·Ä±·Ä∏·ÄÄ·ÄÑ·Ä∫·Ä∏·Äï·Äº·ÄÆ", Color(0xFF38A169)),
        GENERAL("‚ö†Ô∏è", "·Äö·Ä±·Äò·ÄØ·Äö·Äª", Color(0xFF718096))
    }
    
    enum class Severity(val color: Color, val label: String) {
        LOW(Color(0xFF38A169), "·Äî·Ää·Ä∫·Ä∏"),
        MEDIUM(Color(0xFFED8936), "·Ä°·Äú·Äö·Ä∫·Ä°·Äú·Äê·Ä∫"),
        HIGH(Color(0xFFE53E3E), "·Äô·Äº·ÄÑ·Ä∑·Ä∫"),
        CRITICAL(Color(0xFF9B2C2C), "·Ä°·Äõ·Ä±·Ä∏·ÄÄ·Äº·ÄÆ·Ä∏")
    }
    
    private val alertHistory = mutableStateListOf<AlertRecord>()
    private var selectedFilter by mutableStateOf<AlertType?>(null)
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Initialize with sample data
        initializeSampleAlerts()
        
        setContent {
            ThatiAirAlertTheme {
                AlertHistoryScreen()
            }
        }
    }
    
    @Composable
    private fun AlertHistoryScreen() {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFF1A202C))
        ) {
            // Header
            HeaderSection()
            
            // Filter buttons
            FilterSection()
            
            // Statistics
            StatisticsSection()
            
            // Alert list
            AlertListSection()
        }
    }
    
    @Composable
    private fun HeaderSection() {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0xFF2D3748))
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "üìã ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ ·Äô·Äæ·Äê·Ä∫·Äê·Äô·Ä∫·Ä∏",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White
                )
                Text(
                    text = "·ÄÖ·ÄØ·ÄÖ·ÄØ·Äï·Ä±·Ä´·ÄÑ·Ä∫·Ä∏: ${alertHistory.size} ·ÄÅ·ÄØ",
                    fontSize = 14.sp,
                    color = Color.Gray,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }
        }
    }
    
    @Composable
    private fun FilterSection() {
        LazyRow(
            modifier = Modifier.padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            item {
                FilterChip(
                    selected = selectedFilter == null,
                    onClick = { selectedFilter = null },
                    label = { Text("·Ä°·Ä¨·Ä∏·Äú·ÄØ·Ä∂·Ä∏") }
                )
            }
            
            items(AlertType.values()) { type ->
                FilterChip(
                    selected = selectedFilter == type,
                    onClick = { selectedFilter = if (selectedFilter == type) null else type },
                    label = { Text("${type.emoji} ${type.label}") }
                )
            }
        }
    }
    
    @Composable
    private fun StatisticsSection() {
        val filteredAlerts = getFilteredAlerts()
        val stats = calculateStatistics(filteredAlerts)
        
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0xFF2D3748))
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                StatItem("·Äö·Äî·Ä±·Ä∑", stats.today.toString(), Color.White)
                StatItem("·Äí·ÄÆ·Ä°·Äï·Äê·Ä∫", stats.thisWeek.toString(), Color.Blue)
                StatItem("·Ä°·Äõ·Ä±·Ä∏·ÄÄ·Äº·ÄÆ·Ä∏", stats.critical.toString(), Color.Red)
                StatItem("·Äô·Äñ·Äê·Ä∫·Äõ·Äû·Ä±·Ä∏", stats.unread.toString(), Color.Yellow)
            }
        }
    }
    
    @Composable
    private fun StatItem(label: String, value: String, color: Color) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(
                text = value,
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = color
            )
            Text(
                text = label,
                fontSize = 12.sp,
                color = Color.Gray
            )
        }
    }
    
    @Composable
    private fun AlertListSection() {
        val filteredAlerts = getFilteredAlerts()
        
        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(filteredAlerts) { alert ->
                AlertItem(alert = alert)
            }
        }
    }
    
    @Composable
    private fun AlertItem(alert: AlertRecord) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (alert.isRead) Color(0xFF2D3748) else Color(0xFF3A4A5C)
            ),
            shape = RoundedCornerShape(8.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                // Header row
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Text(
                            text = alert.type.emoji,
                            fontSize = 20.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = alert.type.label,
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                    
                    // Severity indicator
                    Card(
                        colors = CardDefaults.cardColors(containerColor = alert.severity.color),
                        shape = RoundedCornerShape(12.dp)
                    ) {
                        Text(
                            text = alert.severity.label,
                            fontSize = 10.sp,
                            color = Color.White,
                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Message
                Text(
                    text = alert.message,
                    fontSize = 14.sp,
                    color = Color.White,
                    lineHeight = 20.sp
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Details row
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column {
                        Text(
                            text = "üìç ${alert.location}",
                            fontSize = 12.sp,
                            color = Color.Gray
                        )
                        Text(
                            text = "üì° ${alert.source}",
                            fontSize = 12.sp,
                            color = Color.Gray
                        )
                    }
                    
                    Column(horizontalAlignment = Alignment.End) {
                        Text(
                            text = formatTime(alert.timestamp),
                            fontSize = 12.sp,
                            color = Color.Gray
                        )
                        Text(
                            text = "üîÑ ${alert.relayCount} relay",
                            fontSize = 12.sp,
                            color = Color.Gray
                        )
                    }
                }
            }
        }
    }
    
    private fun getFilteredAlerts(): List<AlertRecord> {
        return if (selectedFilter == null) {
            alertHistory.sortedByDescending { it.timestamp }
        } else {
            alertHistory.filter { it.type == selectedFilter }.sortedByDescending { it.timestamp }
        }
    }
    
    private fun calculateStatistics(alerts: List<AlertRecord>): Statistics {
        val now = System.currentTimeMillis()
        val oneDayAgo = now - 24 * 60 * 60 * 1000
        val oneWeekAgo = now - 7 * 24 * 60 * 60 * 1000
        
        return Statistics(
            today = alerts.count { it.timestamp > oneDayAgo },
            thisWeek = alerts.count { it.timestamp > oneWeekAgo },
            critical = alerts.count { it.severity == Severity.CRITICAL },
            unread = alerts.count { !it.isRead }
        )
    }
    
    data class Statistics(
        val today: Int,
        val thisWeek: Int,
        val critical: Int,
        val unread: Int
    )
    
    private fun formatTime(timestamp: Long): String {
        val formatter = SimpleDateFormat("MM/dd HH:mm", Locale.getDefault())
        return formatter.format(Date(timestamp))
    }
    
    private fun initializeSampleAlerts() {
        val now = System.currentTimeMillis()
        val sampleAlerts = listOf(
            AlertRecord(
                "1", now - 1000 * 60 * 30, AlertType.JET_FIGHTER,
                "Jet Fighter ·ÅÉ ·ÄÖ·ÄÑ·Ä∫·Ä∏ ·Äô·Äº·Ä±·Ä¨·ÄÄ·Ä∫·Äò·ÄÄ·Ä∫·Äô·Äæ ·ÄÅ·Äª·Äâ·Ä∫·Ä∏·ÄÄ·Äï·Ä∫·Äú·Ä¨·Äî·Ä±", "·Äõ·Äî·Ä∫·ÄÄ·ÄØ·Äî·Ä∫·Äô·Äº·Ä≠·ÄØ·Ä∑",
                Severity.HIGH, "·Äõ·Ä±·Äí·Ä´·ÄÖ·ÄÅ·Äî·Ä∫·Ä∏-·ÅÅ", 5, false
            ),
            AlertRecord(
                "2", now - 1000 * 60 * 60, AlertType.ATTACK,
                "·Äê·Ä≠·ÄØ·ÄÄ·Ä∫·ÄÅ·Ä≠·ÄØ·ÄÄ·Ä∫·Äô·Äæ·ÄØ ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ - ·ÄÅ·Äª·ÄÄ·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏ ·Äõ·Äæ·Ä±·Ä¨·ÄÑ·Ä∫·ÄÄ·ÄΩ·ÄÑ·Ä∫·Ä∏·Äõ·Äî·Ä∫", "·Äô·Äî·Äπ·Äê·Äú·Ä±·Ä∏·Äô·Äº·Ä≠·ÄØ·Ä∑",
                Severity.CRITICAL, "·ÄÖ·ÄÖ·Ä∫·Äå·Ä¨·Äî·ÄÅ·Äª·ÄØ·Äï·Ä∫", 12, true
            ),
            AlertRecord(
                "3", now - 1000 * 60 * 60 * 2, AlertType.EVACUATION,
                "·Äß·Äõ·Ä≠·Äö·Ä¨ ·Äõ·ÄΩ·Äæ·Ä±·Ä∑·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äõ·Äî·Ä∫ ·Ä°·Äô·Ä≠·Äî·Ä∑·Ä∫ - ·Ä°·Äî·Äπ·Äê·Äõ·Ä¨·Äö·Ä∫·ÄÄ·ÄÑ·Ä∫·Ä∏·Äõ·Äæ·ÄÑ·Ä∫·Ä∏·Äû·Ää·Ä∑·Ä∫·Äê·Ä≠·ÄØ·ÄÑ·Ä∫·Ä°·Ä±·Ä¨·ÄÑ·Ä∫", "·Äï·Ä≤·ÄÅ·Ä∞·Ä∏·Äô·Äº·Ä≠·ÄØ·Ä∑",
                Severity.HIGH, "·Ä°·Äõ·Ä±·Ä∏·Äï·Ä±·Ä´·Ä∫·Äå·Ä¨·Äî", 8, true
            ),
            AlertRecord(
                "4", now - 1000 * 60 * 60 * 4, AlertType.GENERAL,
                "·Äö·Ä±·Äò·ÄØ·Äö·Äª ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ - ·Äû·Äê·Ä≠·Äë·Ä¨·Ä∏·Äõ·Äî·Ä∫", "·Äî·Ä±·Äï·Äº·Ää·Ä∫·Äê·Ä±·Ä¨·Ä∫",
                Severity.MEDIUM, "·Äõ·Ä≤·ÄÖ·ÄÅ·Äî·Ä∫·Ä∏-·ÅÇ", 3, true
            ),
            AlertRecord(
                "5", now - 1000 * 60 * 60 * 6, AlertType.ALL_CLEAR,
                "·Äò·Ä±·Ä∏·Ä°·Äî·Äπ·Äê·Äõ·Ä¨·Äö·Ä∫ ·ÄÄ·ÄÑ·Ä∫·Ä∏·Äõ·Äæ·ÄÑ·Ä∫·Ä∏·Äï·Äº·ÄÆ - ·Äï·ÄØ·Ä∂·Äô·Äæ·Äî·Ä∫ ·Äú·ÄØ·Äï·Ä∫·ÄÑ·Äî·Ä∫·Ä∏·Äô·Äª·Ä¨·Ä∏ ·Äï·Äº·Äî·Ä∫·Äú·Ää·Ä∫·ÄÖ·Äê·ÄÑ·Ä∫·Äî·Ä≠·ÄØ·ÄÑ·Ä∫", "·Äõ·Äî·Ä∫·ÄÄ·ÄØ·Äî·Ä∫·Äô·Äº·Ä≠·ÄØ·Ä∑",
                Severity.LOW, "·ÄÖ·ÄÖ·Ä∫·Äå·Ä¨·Äî·ÄÅ·Äª·ÄØ·Äï·Ä∫", 15, true
            ),
            AlertRecord(
                "6", now - 1000 * 60 * 60 * 12, AlertType.HELICOPTER,
                "·Äõ·Äü·Äê·Ä∫·Äö·Ä¨·Äâ·Ä∫ ·Äõ·Ä±·Äí·Ä´·Äê·ÄΩ·ÄÑ·Ä∫ ·Äï·Äª·Ä±·Ä¨·ÄÄ·Ä∫·ÄÄ·ÄΩ·Äö·Ä∫·Äû·ÄΩ·Ä¨·Ä∏", "·Äõ·Äæ·Äô·Ä∫·Ä∏·Äï·Äº·Ää·Ä∫·Äî·Äö·Ä∫",
                Severity.MEDIUM, "·Äõ·Ä±·Äí·Ä´·ÄÖ·ÄÅ·Äî·Ä∫·Ä∏-·ÅÇ", 4, true
            ),
            AlertRecord(
                "7", now - 1000 * 60 * 60 * 24, AlertType.ATTACK,
                "·Ää·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫ ·Äê·Ä≠·ÄØ·ÄÄ·Ä∫·ÄÅ·Ä≠·ÄØ·ÄÄ·Ä∫·Äô·Äæ·ÄØ ·Äñ·Äº·ÄÖ·Ä∫·Äï·ÄΩ·Ä¨·Ä∏·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·ÄÅ·Äº·Ä±", "·ÄÄ·Äõ·ÄÑ·Ä∫·Äï·Äº·Ää·Ä∫·Äî·Äö·Ä∫",
                Severity.HIGH, "·ÄÄ·ÄÑ·Ä∫·Ä∏·Äú·Äæ·Ää·Ä∑·Ä∫·Äê·Äï·Ä∫", 6, true
            )
        )
        
        alertHistory.addAll(sampleAlerts)
    }
}
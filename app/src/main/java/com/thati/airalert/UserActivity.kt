package com.thati.airalert

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.lifecycleScope
import com.thati.airalert.database.AlertDatabase
import com.thati.airalert.models.AlertMessage
import com.thati.airalert.services.AlertService
import com.thati.airalert.ui.theme.ThatiAirAlertTheme
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

/**
 * Enhanced User Activity
 * User mode ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ interface - ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Äï·Ä≠·ÄØ·Äô·Ä≠·ÄØ·ÄÄ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äô·ÄΩ·Äî·Ä∫·Äû·Ä±·Ä¨ UI
 */
class UserActivity : ComponentActivity() {
    
    private var isServiceRunning by mutableStateOf(false)
    private var receivedAlerts by mutableStateOf<List<AlertMessage>>(emptyList())
    private lateinit var database: AlertDatabase
    private var isAlarmEnabled by mutableStateOf(false)
    private var userLocation by mutableStateOf("·Äõ·Äî·Ä∫·ÄÄ·ÄØ·Äî·Ä∫·Äô·Äº·Ä≠·ÄØ·Ä∑")
    private var isSendingAlert by mutableStateOf(false)
    private var userAlertMessage by mutableStateOf("")
    private var networkStatus by mutableStateOf("·ÄÄ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏")
    private var connectedDevices by mutableStateOf(0)
    private var batteryLevel by mutableStateOf(100)
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Database ·ÄÄ·Ä≠·ÄØ initialize ·Äú·ÄØ·Äï·Ä∫·Äï·Ä´
        database = AlertDatabase.getDatabase(this)
        
        // Alert Service ·ÄÄ·Ä≠·ÄØ User mode ·Äñ·Äº·ÄÑ·Ä∑·Ä∫ ·ÄÖ·Äê·ÄÑ·Ä∫·Äï·Ä´
        startAlertService()
        
        // Received alerts ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ load ·Äú·ÄØ·Äï·Ä∫·Äï·Ä´
        loadReceivedAlerts()
        
        setContent {
            ThatiAirAlertTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    UserScreen(
                        onBackPressed = { finish() },
                        isServiceRunning = isServiceRunning,
                        receivedAlerts = receivedAlerts,
                        onRefreshAlerts = { loadReceivedAlerts() },
                        onClearAlerts = { clearAllAlerts() }
                    )
                }
            }
        }
    }
    
    /**
     * Alert Service ·ÄÄ·Ä≠·ÄØ ·ÄÖ·Äê·ÄÑ·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     */
    private fun startAlertService() {
        val intent = Intent(this, AlertService::class.java).apply {
            action = AlertService.ACTION_START_USER
        }
        startForegroundService(intent)
        isServiceRunning = true
    }
    
    /**
     * ·Äú·ÄÄ·Ä∫·ÄÅ·Ä∂·Äõ·Äõ·Äæ·Ä≠·Äû·Ä±·Ä¨ alerts ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ load ·Äú·ÄØ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     */
    private fun loadReceivedAlerts() {
        lifecycleScope.launch {
            try {
                val alerts = database.alertDao().getAllAlerts()
                receivedAlerts = alerts.filter { it.isReceived }
            } catch (e: Exception) {
                // Handle error
            }
        }
    }
    
    /**
     * Alert ·Äô·Äª·Ä¨·Ä∏·Ä°·Ä¨·Ä∏·Äú·ÄØ·Ä∂·Ä∏·ÄÄ·Ä≠·ÄØ ·Äõ·Äæ·ÄÑ·Ä∫·Ä∏·Äú·ÄÑ·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     */
    private fun clearAllAlerts() {
        lifecycleScope.launch {
            try {
                database.alertDao().clearAllAlerts()
                receivedAlerts = emptyList()
            } catch (e: Exception) {
                // Handle error
            }
        }
    }
    
    override fun onResume() {
        super.onResume()
        // Screen ·Äï·Äº·Äî·Ä∫·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äê·Ä≠·ÄØ·ÄÑ·Ä∫·Ä∏ alerts ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ refresh ·Äú·ÄØ·Äï·Ä∫·Äï·Ä´
        loadReceivedAlerts()
    }
    
    override fun onDestroy() {
        super.onDestroy()
        // Service ·ÄÄ·Ä≠·ÄØ ·Äõ·Äï·Ä∫·Äï·Ä´
        val intent = Intent(this, AlertService::class.java).apply {
            action = AlertService.ACTION_STOP_SERVICE
        }
        startService(intent)
    }
}

/**
 * User Screen UI
 */
@Composable
fun UserScreen(
    onBackPressed: () -> Unit,
    isServiceRunning: Boolean,
    receivedAlerts: List<AlertMessage>,
    onRefreshAlerts: () -> Unit,
    onClearAlerts: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextButton(onClick = onBackPressed) {
                Text("‚Üê ·Äï·Äº·Äî·Ä∫·Äû·ÄΩ·Ä¨·Ä∏·Äõ·Äî·Ä∫")
            }
            
            Text(
                text = "üë§ User Mode",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF38A169)
            )
            
            // Status indicator
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(
                    text = if (isServiceRunning) "üü¢" else "üî¥",
                    fontSize = 12.sp
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text(
                    text = if (isServiceRunning) "Listening" else "Inactive",
                    fontSize = 12.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                )
            }
        }
        
        // Enhanced Security Dashboard
        EnhancedSecurityDashboard(
            isServiceRunning = isServiceRunning,
            networkStatus = "·ÄÄ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏", // This would be dynamic in real implementation
            connectedDevices = 5, // This would be dynamic in real implementation
            batteryLevel = 85 // This would be dynamic in real implementation
        )
        
        // Alert statistics
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Card(
                modifier = Modifier.weight(1f),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF7FAFC))
            ) {
                Column(
                    modifier = Modifier.padding(12.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "${receivedAlerts.size}",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF2D3748)
                    )
                    Text(
                        text = "·Äú·ÄÄ·Ä∫·ÄÅ·Ä∂·Äõ·Äõ·Äæ·Ä≠·Äû·Ä±·Ä¨ Alert",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                        textAlign = TextAlign.Center
                    )
                }
            }
            
            Spacer(modifier = Modifier.width(8.dp))
            
            Card(
                modifier = Modifier.weight(1f),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF7FAFC))
            ) {
                Column(
                    modifier = Modifier.padding(12.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "${receivedAlerts.count { it.timestamp > System.currentTimeMillis() - 24 * 60 * 60 * 1000 }}",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF2D3748)
                    )
                    Text(
                        text = "·Äö·Äî·Ä±·Ä∑ Alert",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
        
        // User Alert Input Section
        UserAlertInputSection()
        
        // Alarm Control Section
        AlarmControlSection()
        
        // Action buttons
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Button(
                onClick = onRefreshAlerts,
                modifier = Modifier.weight(1f),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF3182CE))
            ) {
                Text("üîÑ Refresh", fontSize = 14.sp)
            }
            
            Button(
                onClick = onClearAlerts,
                modifier = Modifier.weight(1f),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFE53E3E))
            ) {
                Text("üóëÔ∏è Clear All", fontSize = 14.sp)
            }
        }
        
        // Alerts list header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "·Äú·ÄÄ·Ä∫·ÄÅ·Ä∂·Äõ·Äõ·Äæ·Ä≠·Äû·Ä±·Ä¨ ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
            
            if (receivedAlerts.isNotEmpty()) {
                Text(
                    text = "${receivedAlerts.size} items",
                    fontSize = 12.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                )
            }
        }
        
        // Alerts list
        if (receivedAlerts.isEmpty()) {
            // Empty state
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF7FAFC))
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(32.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "üì≠",
                        fontSize = 48.sp,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    Text(
                        text = "·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ ·Äô·Äõ·Äæ·Ä≠·Äû·Ä±·Ä∏·Äï·Ä´",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center
                    )
                    Text(
                        text = "Alert ·Äô·Äª·Ä¨·Ä∏ ·Äú·ÄÄ·Ä∫·ÄÅ·Ä∂·Äõ·Äõ·Äæ·Ä≠·Äû·Ää·Ä∑·Ä∫·Ä°·ÄÅ·Ä´ ·Ä§·Äî·Ä±·Äõ·Ä¨·Äê·ÄΩ·ÄÑ·Ä∫ ·Äï·Äº·Äû·Äô·Ää·Ä∫·Äñ·Äº·ÄÖ·Ä∫·Äû·Ää·Ä∫",
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }
        } else {
            // Alerts list
            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(receivedAlerts.sortedByDescending { it.timestamp }) { alert ->
                    AlertCard(alert = alert)
                }
            }
        }
    }
}

/**
 * Individual Alert Card
 */
@Composable
fun AlertCard(alert: AlertMessage) {
    val dateFormat = SimpleDateFormat("MMM dd, HH:mm", Locale.getDefault())
    val priorityColor = when (alert.priority.level) {
        4 -> Color(0xFFE53E3E) // Critical
        3 -> Color(0xFFED8936) // High
        2 -> Color(0xFFECC94B) // Medium
        else -> Color(0xFF38A169) // Low
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = priorityColor.copy(alpha = 0.1f)
        ),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // Header with priority and time
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Priority badge
                Surface(
                    color = priorityColor,
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Text(
                        text = alert.priority.name,
                        fontSize = 10.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White,
                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 2.dp)
                    )
                }
                
                Text(
                    text = dateFormat.format(Date(alert.timestamp)),
                    fontSize = 12.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                )
            }
            
            // Alert message
            Text(
                text = alert.message,
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                color = MaterialTheme.colorScheme.onSurface,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            // Footer with hop count and type
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Type: ${alert.alertType.name}",
                    fontSize = 10.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                )
                
                if (alert.hopCount > 0) {
                    Text(
                        text = "Relayed ${alert.hopCount}x",
                        fontSize = 10.sp,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                    )
                }
            }
        }
    }
}
/**
 * 
User Alert Input Section - ·Ä°·Äû·ÄØ·Ä∂·Ä∏·Äï·Äº·ÄØ·Äû·Ä∞·ÄÄ·Ä≠·ÄØ·Äö·Ä∫·Äê·Ä≠·ÄØ·ÄÑ·Ä∫ Alert ·Äï·Ä≠·ÄØ·Ä∑·Äõ·Äî·Ä∫
 */
@Composable
fun UserAlertInputSection() {
    var userAlertMessage by remember { mutableStateOf("") }
    var isSendingAlert by remember { mutableStateOf(false) }
    var selectedAlertType by remember { mutableStateOf("·Äú·Ä±·Äö·Ä¨·Äâ·Ä∫·Äê·ÄΩ·Ä±·Ä∑·Äõ·Äæ·Ä≠") }
    
    val quickAlertTypes = listOf(
        "‚úàÔ∏è ·Äú·Ä±·Äö·Ä¨·Äâ·Ä∫·Äê·ÄΩ·Ä±·Ä∑·Äõ·Äæ·Ä≠",
        "üöÅ ·Äõ·Äü·Äê·Ä∫·Äö·Ä¨·Äâ·Ä∫·Äê·ÄΩ·Ä±·Ä∑·Äõ·Äæ·Ä≠", 
        "üí• ·Äê·Ä≠·ÄØ·ÄÄ·Ä∫·ÄÅ·Ä≠·ÄØ·ÄÄ·Ä∫·Äô·Äæ·ÄØ·ÄÄ·Äº·Ä¨·Ä∏",
        "üî• ·Äô·ÄÆ·Ä∏·Äú·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ",
        "üö® ·Ä°·Äõ·Ä±·Ä∏·Äï·Ä±·Ä´·Ä∫·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä±",
        "‚úÖ ·Äò·Ä±·Ä∏·ÄÄ·ÄÑ·Ä∫·Ä∏·Äï·Äº·ÄÆ"
    )
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF0FFF4))
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üì¢ ·Äû·Äê·Ä≠·Äï·Ä±·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫ ·Äï·Ä≠·ÄØ·Ä∑·Äõ·Äî·Ä∫",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF38A169),
                modifier = Modifier.padding(bottom = 12.dp)
            )
            
            // Quick alert type selection
            Text(
                text = "·Ä°·Äô·Äº·Äî·Ä∫·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·Äõ·Äî·Ä∫:",
                fontSize = 12.sp,
                color = Color(0xFF4A5568),
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            LazyColumn(
                modifier = Modifier.height(120.dp),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                items(quickAlertTypes) { alertType ->
                    OutlinedButton(
                        onClick = { 
                            selectedAlertType = alertType
                            userAlertMessage = alertType
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.outlinedButtonColors(
                            containerColor = if (selectedAlertType == alertType) 
                                Color(0xFF38A169).copy(alpha = 0.1f) else Color.Transparent
                        )
                    ) {
                        Text(
                            text = alertType,
                            fontSize = 14.sp,
                            color = Color(0xFF2D3748)
                        )
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Custom message input
            OutlinedTextField(
                value = userAlertMessage,
                onValueChange = { userAlertMessage = it },
                label = { Text("·ÄÖ·Ä¨·Äû·Ä¨·Ä∏·Äë·Ää·Ä∑·Ä∫·Äõ·Äî·Ä∫ (·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·ÄÅ·ÄΩ·ÄÑ·Ä∑·Ä∫)") },
                modifier = Modifier.fillMaxWidth(),
                maxLines = 2,
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = Color(0xFF38A169),
                    focusedLabelColor = Color(0xFF38A169)
                )
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Send button
            Button(
                onClick = {
                    if (userAlertMessage.isNotBlank()) {
                        isSendingAlert = true
                        // TODO: Implement actual alert sending
                        kotlinx.coroutines.GlobalScope.launch {
                            kotlinx.coroutines.delay(1500)
                            isSendingAlert = false
                            userAlertMessage = ""
                        }
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                enabled = userAlertMessage.isNotBlank() && !isSendingAlert,
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF38A169))
            ) {
                if (isSendingAlert) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        color = Color.White,
                        strokeWidth = 2.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                }
                Text(
                    text = if (isSendingAlert) "·Äï·Ä≠·ÄØ·Ä∑·Äî·Ä±·Äû·Ää·Ä∫..." else "üì§ Alert ·Äï·Ä≠·ÄØ·Ä∑·Äõ·Äî·Ä∫",
                    fontWeight = FontWeight.Bold
                )
            }
            
            Text(
                text = "üí° ·Äû·ÄÑ·Ä∫·Äô·Äº·ÄÑ·Ä∫·Äê·ÄΩ·Ä±·Ä∑·Äõ·Äû·Ä±·Ä¨ ·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä±·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Ä°·Äî·ÄÆ·Ä∏·Ä°·Äî·Ä¨·Ä∏·Äõ·Äæ·Ä≠ ·Ä°·ÄÅ·Äº·Ä¨·Ä∏·Äû·Ä∞·Äô·Äª·Ä¨·Ä∏·Äë·Ä∂ ·Äï·Ä±·Ä∏·Äï·Ä≠·ÄØ·Ä∑·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äû·Ää·Ä∫",
                fontSize = 11.sp,
                color = Color(0xFF4A5568),
                modifier = Modifier.padding(top = 8.dp),
                textAlign = TextAlign.Center
            )
        }
    }
}

/**
 * Alarm Control Section - Alarm ·Ä°·Äû·Ä∂·Äë·Ä≠·Äî·Ä∫·Ä∏·ÄÅ·Äª·ÄØ·Äï·Ä∫·Äõ·Äî·Ä∫
 */
@Composable
fun AlarmControlSection() {
    var isAlarmEnabled by remember { mutableStateOf(false) }
    var isTestingAlarm by remember { mutableStateOf(false) }
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (isAlarmEnabled) Color(0xFFFFF5F5) else Color(0xFFF7FAFC)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "üîä Alarm ·Ä°·Äû·Ä∂",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        color = if (isAlarmEnabled) Color(0xFFE53E3E) else Color(0xFF4A5568)
                    )
                    Text(
                        text = if (isAlarmEnabled) "·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äë·Ä¨·Ä∏·Äû·Ää·Ä∫" else "·Äï·Ä≠·Äê·Ä∫·Äë·Ä¨·Ä∏·Äû·Ää·Ä∫",
                        fontSize = 12.sp,
                        color = Color(0xFF718096)
                    )
                }
                
                Switch(
                    checked = isAlarmEnabled,
                    onCheckedChange = { isAlarmEnabled = it },
                    colors = SwitchDefaults.colors(
                        checkedThumbColor = Color.White,
                        checkedTrackColor = Color(0xFFE53E3E),
                        uncheckedThumbColor = Color.White,
                        uncheckedTrackColor = Color(0xFFCBD5E0)
                    )
                )
            }
            
            if (isAlarmEnabled) {
                Spacer(modifier = Modifier.height(12.dp))
                
                Button(
                    onClick = {
                        isTestingAlarm = true
                        // TODO: Play test alarm sound
                        kotlinx.coroutines.GlobalScope.launch {
                            kotlinx.coroutines.delay(2000)
                            isTestingAlarm = false
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    enabled = !isTestingAlarm,
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFED8936))
                ) {
                    if (isTestingAlarm) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(16.dp),
                            color = Color.White,
                            strokeWidth = 2.dp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                    }
                    Text(
                        text = if (isTestingAlarm) "·ÄÖ·Äô·Ä∫·Ä∏·Äî·Ä±·Äû·Ää·Ä∫..." else "üéµ Alarm ·ÄÖ·Äô·Ä∫·Ä∏·ÄÄ·Äº·Ää·Ä∑·Ä∫·Äõ·Äî·Ä∫",
                        fontWeight = FontWeight.Medium
                    )
                }
                
                Text(
                    text = "‚ö†Ô∏è Alarm ·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äë·Ä¨·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏·Äû·Ää·Ä∫ ·Äò·ÄÄ·Ä∫·Äë·Äõ·ÄÆ ·Äû·ÄØ·Ä∂·Ä∏·ÄÖ·ÄΩ·Ä≤·Äô·Äæ·ÄØ·ÄÄ·Ä≠·ÄØ ·Äê·Ä≠·ÄØ·Ä∏·ÄÖ·Ä±·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äû·Ää·Ä∫",
                    fontSize = 10.sp,
                    color = Color(0xFF718096),
                    modifier = Modifier.padding(top = 8.dp),
                    textAlign = TextAlign.Center
                )
            } else {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "üì± Alert ·Äô·Äª·Ä¨·Ä∏·Äõ·Ä±·Ä¨·ÄÄ·Ä∫·Äõ·Äæ·Ä≠·Äû·Ä±·Ä¨·Ä°·ÄÅ·Ä´ ·Ä°·Äû·Ä∂·Äô·Äº·Ää·Ä∫·ÄÖ·Ä±·Äõ·Äî·Ä∫ ·Äñ·ÄΩ·ÄÑ·Ä∑·Ä∫·Äï·Ä±·Ä∏·Äï·Ä´",
                    fontSize = 12.sp,
                    color = Color(0xFF718096),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}
/**

 * Enhanced Security Dashboard - ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Äë·Ä≠·Äî·Ä∫·Ä∏·ÄÅ·Äª·ÄØ·Äï·Ä∫·Äô·Äæ·ÄØ Dashboard
 */
@Composable
fun EnhancedSecurityDashboard(
    isServiceRunning: Boolean,
    networkStatus: String,
    connectedDevices: Int,
    batteryLevel: Int
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (isServiceRunning) Color(0xFF1A365D) else Color(0xFF742A2A)
        ),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp)
        ) {
            // Header
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "üõ°Ô∏è ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä±",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                    Text(
                        text = if (isServiceRunning) "·ÄÖ·Äî·ÄÖ·Ä∫ ·Ä°·Äú·ÄØ·Äï·Ä∫·Äú·ÄØ·Äï·Ä∫·Äî·Ä±·Äû·Ää·Ä∫" else "·ÄÖ·Äî·ÄÖ·Ä∫ ·Äõ·Äï·Ä∫·Äî·Ä¨·Ä∏·Äî·Ä±·Äû·Ää·Ä∫",
                        fontSize = 12.sp,
                        color = Color(0xFFE2E8F0)
                    )
                }
                
                // Status indicator
                Box(
                    modifier = Modifier
                        .size(16.dp)
                        .background(
                            if (isServiceRunning) Color.Green else Color.Red,
                            shape = androidx.compose.foundation.shape.CircleShape
                        )
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Security metrics
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                SecurityMetric(
                    icon = "üì°",
                    label = "Network",
                    value = networkStatus,
                    color = getNetworkStatusColor(networkStatus)
                )
                
                SecurityMetric(
                    icon = "üë•",
                    label = "Devices",
                    value = connectedDevices.toString(),
                    color = if (connectedDevices > 0) Color.Green else Color.Yellow
                )
                
                SecurityMetric(
                    icon = "üîã",
                    label = "Battery",
                    value = "${batteryLevel}%",
                    color = getBatteryColor(batteryLevel)
                )
                
                SecurityMetric(
                    icon = "üîê",
                    label = "Encryption",
                    value = "Active",
                    color = Color.Green
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Security features status
            SecurityFeaturesList(isServiceRunning)
        }
    }
}

@Composable
fun SecurityMetric(
    icon: String,
    label: String,
    value: String,
    color: Color
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = icon,
            fontSize = 20.sp,
            modifier = Modifier.padding(bottom = 4.dp)
        )
        Text(
            text = value,
            fontSize = 14.sp,
            fontWeight = FontWeight.Bold,
            color = color
        )
        Text(
            text = label,
            fontSize = 10.sp,
            color = Color(0xFFCBD5E0)
        )
    }
}

@Composable
fun SecurityFeaturesList(isServiceRunning: Boolean) {
    val features = listOf(
        SecurityFeature("üîí End-to-End Encryption", isServiceRunning),
        SecurityFeature("üì° Mesh Network Protocol", isServiceRunning),
        SecurityFeature("üõ°Ô∏è Anti-Tampering", true),
        SecurityFeature("üîê Secure Key Exchange", isServiceRunning),
        SecurityFeature("üì± Device Authentication", isServiceRunning)
    )
    
    Column {
        Text(
            text = "·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Äú·ÄØ·Äï·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏:",
            fontSize = 12.sp,
            fontWeight = FontWeight.Bold,
            color = Color.White,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        
        features.forEach { feature ->
            SecurityFeatureItem(feature)
        }
    }
}

data class SecurityFeature(
    val name: String,
    val isActive: Boolean
)

@Composable
fun SecurityFeatureItem(feature: SecurityFeature) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = if (feature.isActive) "‚úÖ" else "‚ùå",
            fontSize = 12.sp
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(
            text = feature.name,
            fontSize = 11.sp,
            color = if (feature.isActive) Color(0xFFE2E8F0) else Color(0xFF9CA3AF)
        )
    }
}

// Helper functions
fun getNetworkStatusColor(status: String): Color {
    return when (status) {
        "·ÄÄ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏" -> Color.Green
        "·Ä°·Äú·Äö·Ä∫·Ä°·Äú·Äê·Ä∫" -> Color.Yellow
        else -> Color.Red
    }
}

fun getBatteryColor(level: Int): Color {
    return when {
        level > 60 -> Color.Green
        level > 30 -> Color.Yellow
        else -> Color.Red
    }
}